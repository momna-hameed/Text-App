{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ICT\\\\myreactapp\\\\yourfirstapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport About from './compponents/About';\nimport Navbar from './compponents/Navbar';\nimport TextForm from './compponents/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './compponents/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState('light');\n  const [modee, setModee] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const toggleRed = () => {\n    if (modee === 'light') {\n      setModee('red');\n      document.body.style.backgroundColor = 'red';\n      document.body.style.color = 'white';\n    } else {\n      setModee('white');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'red';\n    }\n  };\n  const showAlert = (message, type) => {\n    // alert as an object\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'rgb(38 38 39)';\n      showAlert(\"dark mode has been enabled\", \"success\");\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode has been enabled\", \"success\");\n    }\n  };\n\n  //state variable whether dark mode is enabled or not*/\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"Text-Editor\",\n      mode: mode,\n      modee: modee,\n      toggleMode: toggleMode,\n      toggleRed: toggleRed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      alert: alert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(TextForm, {\n        showAlert: showAlert,\n        heading: \"Enter text to Analyze below\",\n        mode: mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(About, {\n        mode: mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"2lnel78+OBHeDZl2vAgD4MYPvJI=\");\n_c = App;\nexport default App;\n\n//import PropTypes\n// props as argument\n//props.variable\n//prop as an object\n//default prop\n\n// manage state in app.js\n//1- make a new state in app.js value='dark'\n//2- pass proptype value mode={mode} into navbar\n//if dark mode enable=true Dark\n//so convert string into template literals\n// switch in navbae to control light mode or dark mode\n//change color of enable dark mode : fun  toggle mode={toggle mode}\n//toggle fun run when someone turn on switch\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["About","Navbar","TextForm","React","useState","Alert","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","modee","setModee","alert","setAlert","toggleRed","document","body","style","backgroundColor","color","showAlert","message","type","msg","setTimeout","toggleMode","children","title","fileName","_jsxFileName","lineNumber","columnNumber","className","heading","_c","$RefreshReg$"],"sources":["C:/Users/ICT/myreactapp/yourfirstapp/src/App.js"],"sourcesContent":["\nimport './App.css';\nimport About from './compponents/About';\nimport Navbar from './compponents/Navbar';\nimport TextForm from './compponents/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './compponents/Alert';\n\nfunction App() {\n  const [mode,setMode]=useState('light');\n  const [modee,setModee]=useState('light');\n  const[alert , setAlert]=useState(null);\n  const toggleRed=()=>\n  {\n    if(modee==='light')\n    {\n      setModee('red');\n      document.body.style.backgroundColor='red';\n      document.body.style.color='white';\n    }\n    else{\n      setModee('white')\n      document.body.style.backgroundColor='white';\n      \n      document.body.style.color='red';\n\n    }\n  }\n  const showAlert=(message, type)=>\n  {\n    // alert as an object\n    setAlert(\n      {\n        msg: message,\n        type:type\n      }\n    )\n    setTimeout(()=>\n    {\nsetAlert(null);\n    },1500);\n  }\n  const toggleMode=()=>\n  {\n    if(mode==='light')\n    {\n      \n      setMode('dark');\n      document.body.style.backgroundColor='rgb(38 38 39)';\n      showAlert(\"dark mode has been enabled\", \"success\");\n    }\n\n    else\n    {\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"light mode has been enabled\" , \"success\");\n    }\n\n  }\n\n  //state variable whether dark mode is enabled or not*/\n  return (\n<>\n <Navbar title=\"Text-Editor\" mode={mode}  modee={modee} toggleMode={toggleMode} toggleRed={toggleRed}/>\n <Alert alert={alert}/>\n<div className=\"container\">\n<TextForm showAlert={showAlert} heading= \"Enter text to Analyze below\" mode={mode} />\n</div>\n<div className=\"container\">\n<About mode={mode}/>\n</div>\n </>\n  );\n\n  \n}\n\nexport default App;\n\n//import PropTypes\n// props as argument\n//props.variable\n//prop as an object\n//default prop\n\n// manage state in app.js\n//1- make a new state in app.js value='dark'\n//2- pass proptype value mode={mode} into navbar\n//if dark mode enable=true Dark\n//so convert string into template literals\n// switch in navbae to control light mode or dark mode\n//change color of enable dark mode : fun  toggle mode={toggle mode}\n//toggle fun run when someone turn on switch"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}