{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ICT\\\\myreactapp\\\\yourfirstapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport About from './compponents/About';\nimport Navbar from './compponents/Navbar';\nimport TextForm from './compponents/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './compponents/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState('light');\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#040118';\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n    }\n  };\n  //state variable whether dark mode is enabled or not*/\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"Text-Editor\",\n      mode: mode,\n      toggleMode: toggleMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      alert: \"this is alert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(TextForm, {\n        heading: \"Enter text to Analyze below\",\n        mode: mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(About, {\n        mode: mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"DxnDEBhP772OWDbdWJYBu1Jdce4=\");\n_c = App;\nexport default App;\n\n//import PropTypes\n// props as argument\n//props.variable\n//prop as an object\n//default prop\n\n// manage state in app.js\n//1- make a new state in app.js value='dark'\n//2- pass proptype value mode={mode} into navbar\n//if dark mode enable=true Dark\n//so convert string into template literals\n// switch in navbae to control light mode or dark mode\n//change color of enable dark mode : fun  toggle mode={toggle mode}\n//toggle fun run when someone turn on switch\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["About","Navbar","TextForm","React","useState","Alert","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","toggleMode","document","body","style","backgroundColor","children","title","fileName","_jsxFileName","lineNumber","columnNumber","alert","className","heading","_c","$RefreshReg$"],"sources":["C:/Users/ICT/myreactapp/yourfirstapp/src/App.js"],"sourcesContent":["\nimport './App.css';\nimport About from './compponents/About';\nimport Navbar from './compponents/Navbar';\nimport TextForm from './compponents/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './compponents/Alert';\n\nfunction App() {\n  const [mode,setMode]=useState('light');\n  const toggleMode=()=>\n  {\n    if(mode==='light')\n    {\n      \n      setMode('dark');\n      document.body.style.backgroundColor='#040118';\n    }\n    else\n    {\n      setMode('light');\n      document.body.style.backgroundColor='white';\n    }\n\n  }\n  //state variable whether dark mode is enabled or not*/\n  return (\n<>\n <Navbar title=\"Text-Editor\" mode={mode} toggleMode={toggleMode}/>\n <Alert alert=\"this is alert\"/>\n<div className=\"container\">\n<TextForm heading= \"Enter text to Analyze below\" mode={mode} />\n</div>\n<div className=\"container\">\n<About mode={mode}/>\n</div>\n </>\n  );\n\n  \n}\n\nexport default App;\n\n//import PropTypes\n// props as argument\n//props.variable\n//prop as an object\n//default prop\n\n// manage state in app.js\n//1- make a new state in app.js value='dark'\n//2- pass proptype value mode={mode} into navbar\n//if dark mode enable=true Dark\n//so convert string into template literals\n// switch in navbae to control light mode or dark mode\n//change color of enable dark mode : fun  toggle mode={toggle mode}\n//toggle fun run when someone turn on switch"],"mappings":";;AACA,OAAO,WAAW;AAClB,OAAOA,KAAK,MAAM,qBAAqB;AACvC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAACT,QAAQ,CAAC,OAAO,CAAC;EACtC,MAAMU,UAAU,GAACA,CAAA,KACjB;IACE,IAAGF,IAAI,KAAG,OAAO,EACjB;MAEEC,OAAO,CAAC,MAAM,CAAC;MACfE,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAC,SAAS;IAC/C,CAAC,MAED;MACEL,OAAO,CAAC,OAAO,CAAC;MAChBE,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAC,OAAO;IAC7C;EAEF,CAAC;EACD;EACA,oBACFX,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACCZ,OAAA,CAACN,MAAM;MAACmB,KAAK,EAAC,aAAa;MAACR,IAAI,EAAEA,IAAK;MAACE,UAAU,EAAEA;IAAW;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACjEjB,OAAA,CAACF,KAAK;MAACoB,KAAK,EAAC;IAAe;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC/BjB,OAAA;MAAKmB,SAAS,EAAC,WAAW;MAAAP,QAAA,eAC1BZ,OAAA,CAACL,QAAQ;QAACyB,OAAO,EAAE,6BAA6B;QAACf,IAAI,EAAEA;MAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC,eACNjB,OAAA;MAAKmB,SAAS,EAAC,WAAW;MAAAP,QAAA,eAC1BZ,OAAA,CAACP,KAAK;QAACY,IAAI,EAAEA;MAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf,CAAC;EAAA,eACH,CAAC;AAIJ;AAACb,EAAA,CAhCQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AAkCZ,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}