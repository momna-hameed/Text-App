{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ICT\\\\myreactapp\\\\yourfirstapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport About from './compponents/About';\nimport Navbar from './compponents/Navbar';\nimport TextForm from './compponents/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './compponents/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState('light');\n  const [mode1, setMode1] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    // alert as an object\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'rgb(38 38 39)';\n      showAlert(\"dark mode has been enabled\", \"success\");\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode has been enabled\", \"success\");\n    }\n  };\n  const toggleMode1 = () => {\n    if (mode1 === 'light') {\n      setMode1('black');\n    } else {\n      setMode1('light');\n    }\n  };\n  //state variable whether dark mode is enabled or not*/\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"Text-Editor\",\n      mode: mode,\n      toggleMode: toggleMode,\n      mode1: mode1,\n      toggleMode1: toggleMode1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      alert: alert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(TextForm, {\n        showAlert: showAlert,\n        heading: \"Enter text to Analyze below\",\n        mode: mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(About, {\n        mode: mode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"XlZj7nuJjFb4Vn75Cj/0Wa42OQA=\");\n_c = App;\nexport default App;\n\n//import PropTypes\n// props as argument\n//props.variable\n//prop as an object\n//default prop\n\n// manage state in app.js\n//1- make a new state in app.js value='dark'\n//2- pass proptype value mode={mode} into navbar\n//if dark mode enable=true Dark\n//so convert string into template literals\n// switch in navbae to control light mode or dark mode\n//change color of enable dark mode : fun  toggle mode={toggle mode}\n//toggle fun run when someone turn on switch\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["About","Navbar","TextForm","React","useState","Alert","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","mode1","setMode1","alert","setAlert","showAlert","message","type","msg","setTimeout","toggleMode","document","body","style","backgroundColor","toggleMode1","children","title","fileName","_jsxFileName","lineNumber","columnNumber","className","heading","_c","$RefreshReg$"],"sources":["C:/Users/ICT/myreactapp/yourfirstapp/src/App.js"],"sourcesContent":["\nimport './App.css';\nimport About from './compponents/About';\nimport Navbar from './compponents/Navbar';\nimport TextForm from './compponents/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './compponents/Alert';\n\nfunction App() {\n  const [mode,setMode]=useState('light');\n  const [mode1,setMode1]=useState('light');\n  const[alert , setAlert]=useState(null);\n  const showAlert=(message, type)=>\n  {\n    // alert as an object\n    setAlert(\n      {\n        msg: message,\n        type:type\n      }\n    )\n    setTimeout(()=>\n    {\nsetAlert(null);\n    },1500);\n  }\n  const toggleMode=()=>\n  {\n    if(mode==='light')\n    {\n      \n      setMode('dark');\n      document.body.style.backgroundColor='rgb(38 38 39)';\n      showAlert(\"dark mode has been enabled\", \"success\");\n    }\n    else\n    {\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"light mode has been enabled\" , \"success\");\n    }\n\n  }\n  const toggleMode1=()=>\n  {\n    if(mode1==='light')\n    {\n      setMode1('black');\n    }\n    else\n    {\n      setMode1('light');\n    }\n  }\n  //state variable whether dark mode is enabled or not*/\n  return (\n<>\n <Navbar title=\"Text-Editor\" mode={mode}  toggleMode={toggleMode} mode1={mode1} toggleMode1={toggleMode1}/>\n <Alert alert={alert}/>\n<div className=\"container\">\n<TextForm showAlert={showAlert} heading= \"Enter text to Analyze below\" mode={mode} />\n</div>\n<div className=\"container\">\n<About mode={mode}/>\n</div>\n </>\n  );\n\n  \n}\n\nexport default App;\n\n//import PropTypes\n// props as argument\n//props.variable\n//prop as an object\n//default prop\n\n// manage state in app.js\n//1- make a new state in app.js value='dark'\n//2- pass proptype value mode={mode} into navbar\n//if dark mode enable=true Dark\n//so convert string into template literals\n// switch in navbae to control light mode or dark mode\n//change color of enable dark mode : fun  toggle mode={toggle mode}\n//toggle fun run when someone turn on switch"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}